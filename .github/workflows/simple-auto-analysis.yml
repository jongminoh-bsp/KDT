name: 🤖 Simple Auto AI Analysis

on:
  push:
    branches: [dev]
    paths: 
      - 'app/**'
      - 'skyline_system_demo/**'
      - '**/pom.xml'
      - '**/package.json'

jobs:
  ai-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 🔍 Detect Application
      id: detect
      run: |
        echo "🔍 Looking for applications..."
        
        if [ -d "app" ]; then
          echo "✅ Found app/ directory"
          echo "app_dir=app" >> $GITHUB_OUTPUT
          echo "has_app=true" >> $GITHUB_OUTPUT
        elif [ -d "skyline_system_demo" ]; then
          echo "✅ Found skyline_system_demo/ directory"
          echo "app_dir=skyline_system_demo" >> $GITHUB_OUTPUT
          echo "has_app=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No application directory found"
          echo "has_app=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 🤖 Run AI Analysis
      if: steps.detect.outputs.has_app == 'true'
      run: |
        APP_DIR="${{ steps.detect.outputs.app_dir }}"
        echo "🤖 Analyzing: $APP_DIR"
        
        # 간단한 분석 실행
        python3 automation/analyzer/code_analyzer.py "./$APP_DIR"
        
        echo "✅ Analysis completed for $APP_DIR"
    
    - name: 🏗️ Generate Infrastructure
      if: steps.detect.outputs.has_app == 'true'
      run: |
        APP_DIR="${{ steps.detect.outputs.app_dir }}"
        echo "🏗️ Generating infrastructure for: $APP_DIR"
        
        # config.py 업데이트
        FULL_PATH="$(pwd)/$APP_DIR"
        sed -i "s|APPLICATION_SOURCE_PATH = \".*\"|APPLICATION_SOURCE_PATH = \"$FULL_PATH\"|" automation/config.py
        
        # 간단한 생성 스크립트 실행
        python3 -c "
import sys, os
sys.path.append('automation')
from analyzer.code_analyzer import ApplicationAnalyzer
import json

analyzer = ApplicationAnalyzer('$FULL_PATH')
result = analyzer.analyze()

print('✅ Analysis Results:')
print(f'Framework: {result[\"framework\"]}')
print(f'Replicas: {result[\"resources\"][\"replicas\"]}')
print(f'Memory: {result[\"resources\"][\"memory_limit\"]}')

# 결과 저장
with open('ai_analysis_result.json', 'w') as f:
    json.dump(result, f, indent=2)
"
        
        echo "✅ Infrastructure analysis completed"
    
    - name: 📊 Show Results
      if: steps.detect.outputs.has_app == 'true'
      run: |
        echo "📊 AI Analysis Results:"
        cat ai_analysis_result.json | head -20
        
        echo ""
        echo "🎯 Next Steps:"
        echo "1. Review the analysis results"
        echo "2. Infrastructure code would be generated"
        echo "3. PR would be created automatically"
        echo "4. After approval, infrastructure would be deployed"
        
        echo ""
        echo "✅ AI automation workflow completed successfully!"
