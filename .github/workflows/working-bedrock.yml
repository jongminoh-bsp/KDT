name: 🤖 Working Amazon Bedrock Test

on:
  workflow_dispatch:  # 수동 실행으로 테스트
  push:
    branches: [dev]
    paths: ['test_app/**']

env:
  AWS_DEFAULT_REGION: us-east-1

jobs:
  real-bedrock-test:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install Latest boto3
      run: |
        pip install --upgrade pip
        pip install boto3>=1.34.0
        python -c "import boto3; print(f'boto3 version: {boto3.__version__}')"
    
    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
        role-session-name: GitHubActions-BedrockTest
    
    - name: 🧪 Test AWS Connection
      run: |
        echo "🔍 Testing AWS connection..."
        aws sts get-caller-identity
        echo "✅ AWS authentication successful"
    
    - name: 🤖 Test Real Amazon Bedrock
      run: |
        echo "🤖 Testing real Amazon Bedrock connection..."
        python3 << 'EOF'
import boto3
import json
import sys

try:
    print("📦 boto3 version:", boto3.__version__)
    
    # Bedrock 클라이언트 생성
    bedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')
    print("✅ Bedrock client created successfully")
    
    # 실제 Claude 호출 테스트
    prompt = """Analyze this Node.js application and provide infrastructure recommendations:

package.json:
{
  "name": "test-app",
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0", 
    "redis": "^4.6.7"
  }
}

Provide response in JSON format with framework, database requirements, and resource recommendations."""

    response = bedrock_client.invoke_model(
        modelId='anthropic.claude-3-haiku-20240307-v1:0',
        body=json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 1000,
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        })
    )
    
    # 응답 파싱
    result = json.loads(response['body'].read())
    ai_response = result['content'][0]['text']
    
    print("🎉 SUCCESS! Real Amazon Bedrock Claude analysis:")
    print("=" * 50)
    print(ai_response)
    print("=" * 50)
    print("✅ Amazon Bedrock is working in GitHub Actions!")
    
except Exception as e:
    print(f"❌ Bedrock test failed: {e}")
    print("🔍 Error details:", str(e))
    sys.exit(1)
EOF
    
    - name: 📊 Bedrock Success Summary
      run: |
        echo "## 🎉 Amazon Bedrock Success!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Verified Working Components" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Authentication**: Working" >> $GITHUB_STEP_SUMMARY
        echo "- **Bedrock Client**: Connected" >> $GITHUB_STEP_SUMMARY
        echo "- **Claude AI**: Responding" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Analysis**: Functional" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🤖 Real Amazon AI is analyzing code in GitHub Actions!**" >> $GITHUB_STEP_SUMMARY
