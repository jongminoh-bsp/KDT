name: ✈️ Skyline AI Analysis

on:
  push:
    branches: [dev]
    paths: ['app/**']

jobs:
  analyze-skyline:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Dependencies
      run: pip install boto3>=1.34.0
    
    - name: Analyze Skyline App
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "✈️ Analyzing Skyline 항공예약시스템..."
        
        # Check app structure
        echo "📁 Application structure:"
        ls -la app/
        
        if [ -f "app/pom.xml" ]; then
          echo "✅ Spring Boot application detected"
        fi
        
        # Amazon Q AI Analysis
        python3 << 'EOF'
import boto3
import json

try:
    print("🤖 Amazon Q AI analyzing Skyline airline system...")
    
    client = boto3.client('bedrock-runtime', region_name='ap-northeast-2')
    
    response = client.invoke_model(
        modelId='anthropic.claude-3-haiku-20240307-v1:0',
        body=json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 400,
            "messages": [{
                "role": "user", 
                "content": "Analyze Skyline 항공예약시스템 - a Spring Boot airline reservation system. Recommend AWS infrastructure: EKS cluster size, RDS MySQL specs, memory/CPU requirements, estimated cost. Respond in JSON format."
            }]
        })
    )
    
    result = json.loads(response['body'].read())
    ai_response = result['content'][0]['text']
    
    print("🎉 Amazon Q AI Analysis for Skyline:")
    print("=" * 60)
    print(ai_response)
    print("=" * 60)
    
    # Save analysis
    analysis = {
        "application": "skyline-airline-reservation",
        "framework": "spring-boot",
        "ai_analysis": ai_response,
        "recommendations": {
            "memory": "2Gi",
            "cpu": "1000m",
            "replicas": 3,
            "database": "RDS MySQL",
            "cost_estimate": "$200/month"
        }
    }
    
    with open('skyline_analysis.json', 'w') as f:
        json.dump(analysis, f, indent=2)
    
    print("✅ Skyline AI analysis completed!")
    
except Exception as e:
    print(f"❌ Analysis failed: {e}")
    
    # Simple fallback
    fallback = {
        "application": "skyline-airline-reservation",
        "framework": "spring-boot",
        "status": "fallback",
        "recommendations": {
            "memory": "2Gi",
            "cpu": "1000m",
            "replicas": 2,
            "database": "RDS MySQL"
        }
    }
    
    with open('skyline_analysis.json', 'w') as f:
        json.dump(fallback, f, indent=2)
    
    print("🔄 Using fallback analysis")
EOF
    
    - name: Show Results
      run: |
        echo "📊 Skyline Analysis Results:"
        echo "============================"
        
        if [ -f "skyline_analysis.json" ]; then
          cat skyline_analysis.json
        fi
        
        echo ""
        echo "✅ Skyline 항공예약시스템 analysis completed!"
        echo "🚀 Ready for EKS deployment!"
