name: 🚀 AI-Generated Infrastructure Deployment

on:
  pull_request:
    types: [closed]
    branches: [dev]
    paths: ['terraform/**']

env:
  AWS_REGION: ap-northeast-2
  TF_VERSION: 1.5.0

jobs:
  # PR이 머지되었을 때만 실행
  deploy-infrastructure:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-TerraformDeploy
    
    - name: 📋 Terraform Init
      working-directory: terraform
      run: |
        terraform init
        echo "✅ Terraform initialized successfully"
    
    - name: 🔍 Terraform Validate
      working-directory: terraform
      run: |
        terraform validate
        echo "✅ Terraform configuration is valid"
    
    - name: 📊 Terraform Plan
      working-directory: terraform
      run: |
        terraform plan -out=tfplan
        echo "✅ Terraform plan generated"
    
    - name: 🚀 Terraform Apply
      working-directory: terraform
      run: |
        terraform apply -auto-approve tfplan
        echo "✅ Infrastructure deployed successfully"
    
    - name: 📤 Save Terraform Outputs
      working-directory: terraform
      run: |
        terraform output -json > terraform-outputs.json
        echo "✅ Terraform outputs saved"
    
    - name: ⚙️ Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $(terraform -chdir=terraform output -raw eks_cluster_name)
        kubectl get nodes
        echo "✅ kubectl configured for EKS cluster"
    
    - name: 📝 Create Deployment Summary
      run: |
        echo "## 🎉 Infrastructure Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Deployed Resources" >> $GITHUB_STEP_SUMMARY
        echo "- **EKS Cluster**: $(terraform -chdir=terraform output -raw eks_cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **VPC ID**: $(terraform -chdir=terraform output -raw vpc_id)" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. ✅ Infrastructure is ready" >> $GITHUB_STEP_SUMMARY
        echo "2. 🔄 Kubernetes manifests will be auto-generated" >> $GITHUB_STEP_SUMMARY
        echo "3. 📦 Application deployment PR will be created" >> $GITHUB_STEP_SUMMARY
        echo "4. 🌐 Domain configuration will be applied" >> $GITHUB_STEP_SUMMARY
    
    - name: 💬 Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Terraform outputs 읽기
          let outputs = {};
          try {
            outputs = JSON.parse(fs.readFileSync('terraform/terraform-outputs.json', 'utf8'));
          } catch (e) {
            console.log('Could not read terraform outputs');
          }
          
          const comment = `## 🎉 Infrastructure Deployment Successful!
          
          **Deployment Time**: ${new Date().toISOString()}
          **AWS Region**: ${{ env.AWS_REGION }}
          
          ### 🏗️ Created Resources
          - **EKS Cluster**: ${outputs.eks_cluster_name?.value || 'Created'}
          - **VPC**: ${outputs.vpc_id?.value || 'Created'}
          - **RDS Database**: ${outputs.rds_endpoint?.value ? '✅ Created' : '❌ Not Required'}
          
          ### 🎯 What's Next?
          1. **Kubernetes Ready**: EKS cluster is operational
          2. **Application Deployment**: Next PR will deploy the application
          3. **Domain Setup**: SSL certificate and domain configuration
          4. **Monitoring**: CloudWatch and logging configured
          
          ### 🔗 Quick Access
          \`\`\`bash
          # Connect to EKS cluster
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${outputs.eks_cluster_name?.value || 'cluster-name'}
          
          # Check cluster status
          kubectl get nodes
          kubectl get pods --all-namespaces
          \`\`\`
          
          **🚀 Infrastructure is ready for application deployment!**`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: 🏷️ Add Success Label
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['✅ deployed', 'infrastructure-ready']
          });

  # 배포 실패 시 알림
  notify-failure:
    if: failure() && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
    - name: 🚨 Deployment Failed Notification
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 🚨 Infrastructure Deployment Failed
          
          **Failure Time**: ${new Date().toISOString()}
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          
          ### 🔍 Troubleshooting Steps
          1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. Verify AWS credentials and permissions
          3. Check Terraform configuration syntax
          4. Ensure AWS resource limits are not exceeded
          
          ### 🛠️ Common Issues
          - **AWS Permissions**: Ensure the GitHub Actions role has sufficient permissions
          - **Resource Limits**: Check if AWS account has reached service limits
          - **Terraform State**: Verify Terraform state is not corrupted
          
          **Please review the logs and retry the deployment.**`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['❌ deployment-failed', 'needs-investigation']
          });
