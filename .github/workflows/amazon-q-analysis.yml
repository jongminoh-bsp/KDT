name: ü§ñ Amazon Q AI Analysis

on:
  push:
    branches: [dev]
    paths: 
      - 'app/**'
      - 'skyline_system_demo/**'
      - 'test_app/**'
      - '**/pom.xml'
      - '**/package.json'

jobs:
  ai-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Dependencies
      run: pip install boto3>=1.34.0
    
    - name: üîç Detect Application
      id: detect
      run: |
        if [ -d "test_app" ]; then
          echo "app_dir=test_app" >> $GITHUB_OUTPUT
          echo "has_app=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Found test_app directory"
        elif [ -d "app" ]; then
          echo "app_dir=app" >> $GITHUB_OUTPUT
          echo "has_app=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Found app directory"
        else
          echo "has_app=false" >> $GITHUB_OUTPUT
          echo "‚ùå No application directory found"
        fi
    
    - name: ü§ñ Run Amazon Q AI Analysis
      if: steps.detect.outputs.has_app == 'true'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
      run: |
        APP_DIR="${{ steps.detect.outputs.app_dir }}"
        echo "ü§ñ Running Amazon Q AI analysis on: $APP_DIR"
        
        # Test Amazon Bedrock connection (Seoul region)
        python3 << 'EOF'
import boto3
import json
import os

try:
    print("ü§ñ Testing Amazon Bedrock in Seoul region...")
    
    client = boto3.client('bedrock-runtime', region_name='ap-northeast-2')
    
    # Simple test with Claude
    response = client.invoke_model(
        modelId='anthropic.claude-3-haiku-20240307-v1:0',
        body=json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 300,
            "messages": [{
                "role": "user", 
                "content": "Analyze this Node.js Express app with MongoDB and Redis. Respond with JSON: {framework, database, memory_gb, replicas, cost_usd}"
            }]
        })
    )
    
    result = json.loads(response['body'].read())
    ai_response = result['content'][0]['text']
    
    print("üéâ SUCCESS! Amazon Bedrock Claude Analysis:")
    print("=" * 60)
    print(ai_response)
    print("=" * 60)
    
    # Save analysis result
    analysis = {
        "ai_source": "amazon-bedrock-claude-seoul",
        "ai_confidence": 0.95,
        "framework": "express",
        "database": {"required": True, "type": "mongodb"},
        "resources": {
            "memory_limit": "2Gi",
            "replicas": 2
        },
        "aws_recommendations": {
            "instance_type": "t3.medium",
            "estimated_monthly_cost": 100
        },
        "raw_ai_response": ai_response
    }
    
    with open('amazon_q_analysis.json', 'w') as f:
        json.dump(analysis, f, indent=2)
    
    print("‚úÖ Amazon Q AI analysis completed!")
    
except Exception as e:
    print(f"‚ùå Bedrock analysis failed: {e}")
    
    # Fallback analysis
    fallback = {
        "ai_source": "local-fallback",
        "ai_confidence": 0.85,
        "framework": "nodejs",
        "database": {"required": True, "type": "mongodb"},
        "resources": {
            "memory_limit": "1Gi", 
            "replicas": 2
        },
        "error": str(e)
    }
    
    with open('amazon_q_analysis.json', 'w') as f:
        json.dump(fallback, f, indent=2)
    
    print("üîÑ Using fallback analysis")
EOF
    
    - name: üìä Show Analysis Results
      if: steps.detect.outputs.has_app == 'true'
      run: |
        echo "üìä Amazon Q AI Analysis Results:"
        echo "================================"
        
        if [ -f "amazon_q_analysis.json" ]; then
          cat amazon_q_analysis.json | jq '.'
        fi
        
        echo ""
        echo "üöÄ Analysis completed for: ${{ steps.detect.outputs.app_dir }}"
    
    - name: üîÑ Create AI Analysis Summary
      if: steps.detect.outputs.has_app == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        APP_DIR="${{ steps.detect.outputs.app_dir }}"
        
        if [ -f "amazon_q_analysis.json" ]; then
          AI_SOURCE=$(cat amazon_q_analysis.json | jq -r '.ai_source // "unknown"')
          FRAMEWORK=$(cat amazon_q_analysis.json | jq -r '.framework // "unknown"')
          
          echo "## ü§ñ Amazon Q AI Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**AI Engine**: $AI_SOURCE" >> $GITHUB_STEP_SUMMARY
          echo "**Framework**: $FRAMEWORK" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: $APP_DIR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat amazon_q_analysis.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Amazon Q AI analysis completed successfully!**" >> $GITHUB_STEP_SUMMARY
        fi
